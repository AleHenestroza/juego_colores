// Variable declarations
let numSquares = 6;
let colors = [];
let pickedColor;
const squares = document.querySelectorAll('.square');
const colorDisplay = document.getElementById('colorDisplay');
const messageDisplay = document.querySelector('#message');
const h1 = document.querySelector('h1');
const resetButton = document.querySelector('#newGame');
const modeBtns = document.querySelectorAll('.mode');

const init = () => {
	// Mode buttons event listeners
	setUpModeButtons();
	// Squares' event listeners
	setUpSquares();
	// Initializing the game
	reset();
};

const setUpModeButtons = () => {
	for (let i = 0; i < modeBtns.length; i++) {
		modeBtns[i].addEventListener('click', function () {
			//This for loop removes the selected class from all buttons so it only assigns to the one clicked
			for (let j = 0; j < modeBtns.length; j++) {
				modeBtns[j].classList.remove('selected');
			}
			this.classList.add('selected');
			// Figure out how many squares
			if (this.textContent === 'FÃ¡cil') {
				numSquares = 3;
			} else if (this.textContent === 'Intermedio') {
				numSquares = 6;
			} else {
				numSquares = 9;
			}
			reset();
		});
	}
	resetButton.addEventListener('click', reset);
};

const setUpSquares = () => {
	for (let i = 0; i < squares.length; i++) {
		// Click listeners
		squares[i].addEventListener('click', function () {
			// Grab color of clicked square
			let clickedColor = this.style.backgroundColor;
			// Compare color to pickedColor
			if (clickedColor === pickedColor) {
				messageDisplay.textContent = 'Correcto!';
				changeColors(clickedColor);
				h1.style.backgroundColor = clickedColor;
				resetButton.textContent = 'Jugar de nuevo';
			} else {
				this.style.backgroundColor = '#232323';
				messageDisplay.textContent = 'Intenta de nuevo';
			}
		});
	}
};

const reset = () => {
	// Generate new colors
	colors = generateRandomColors(numSquares);
	// Pick new random color
	pickedColor = pickColor();
	// Change color display to match new pickedColor
	colorDisplay.textContent = pickedColor;
	// Change square colors
	for (let i = 0; i < squares.length; i++) {
		// Color assignment
		if (colors[i]) {
			squares[i].style.display = 'block';
			squares[i].style.backgroundColor = colors[i];
		} else {
			squares[i].style.display = 'none';
		}
	}
	// Reset UI
	resetButton.textContent = 'Nuevos Colores';
	messageDisplay.textContent = '';
	h1.style.backgroundColor = 'steelblue';
};

// Change the squares to be the pickedColor when you win
const changeColors = color => {
	// Loop through all squares
	for (let i = 0; i < squares.length; i++) {
		squares[i].style.backgroundColor = color;
	}
};

// Randomize the pickedColor
const pickColor = () => {
	let random = Math.floor(Math.random() * colors.length);
	return colors[random];
};

// Random colors[] generator. Takes a parameter that represents the level of difficulty (3 being "easy", 6 "medium" and 9 "hard")
// This function does not randomize the colors, it just initializes the array by taking random colors generated by a separate function
const generateRandomColors = num => {
	// Make an array
	const arr = [];
	// Add num colors to array
	for (let i = 0; i < num; i++) {
		arr.push(randomColor());
		// Get random color and push into array
	}
	// Return the array
	return arr;
};

// Random rgb generator. This function generates 3 random numbers from 0 to 255 and generates an rgb color with them.
const randomColor = () => {
	// Pick a "red" from 0 to 255
	const r = Math.floor(Math.random() * 256);
	// Pick a "green" from 0 to 255
	const g = Math.floor(Math.random() * 256);
	// Pick a "bluee" from 0 to 255
	const b = Math.floor(Math.random() * 256);
	return 'rgb(' + r + ', ' + g + ', ' + b + ')';
};

init();
